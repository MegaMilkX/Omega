/*
    This header file was generated by a tool. Any changes made to it will be lost
*/
#pragma once

enum INPUT_DEVICE;
const char* to_string(INPUT_DEVICE e);
enum MyNamespace::LimitedEnum;
const char* to_string(MyNamespace::LimitedEnum e);
enum MyNamespace::MyClass::STATE;
const char* to_string(MyNamespace::MyClass::STATE e);



#define CPPI_REFLECT_Foo \
    type_register<Foo>("Foo"); \
		
#define CPPI_REFLECT_GuiInputFilePath \
    type_register<GuiInputFilePath>("GuiInputFilePath"); \
		
#define CPPI_REFLECT_MyBase \
    type_register<MyBase>("MyBase"); \
		
#define CPPI_REFLECT_MyNamespace__MyClass \
    type_register<MyNamespace::MyClass>("MyClass") \
		.parent<Foo>() \
		.parent<MyBase>() \
		.prop("value", &MyNamespace::MyClass::value); \
        .prop<const gfxm::vec4&(MyNamespace::MyClass::*)() const, void(MyNamespace::MyClass::*)(const gfxm::vec4&)>("color", &MyNamespace::MyClass::getColor, &MyNamespace::MyClass::setColor) \
		.prop<int(MyNamespace::MyClass::*)() const, void(MyNamespace::MyClass::*)(int)>("index", &MyNamespace::MyClass::getValue, &MyNamespace::MyClass::setValue) \
		.prop_read_only<MyNamespace::MyClass::STATE(MyNamespace::MyClass::*)() const>("state", &MyNamespace::MyClass::getState); \

#define CPPI_REFLECT_MyNamespace__MyClass__Data \
    type_register<MyNamespace::MyClass::Data>("Data") \
		.prop("integral", &MyNamespace::MyClass::Data::integral) \
        .prop("floating", &MyNamespace::MyClass::Data::floating) \
        .prop("pstr", &MyNamespace::MyClass::Data::pstr); \
        
